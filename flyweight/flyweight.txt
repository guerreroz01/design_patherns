                        Flyweight

También llamado: Peso mosca, Peso ligero, Cache.



                        Proposito

Flyweight es un patrón de diseño estructural que te permite mantener más
objetos dentro de la cantidad disponible de RAM compartiendo las partes comunes
del estado entre varios objetos en lugar de mantener toda la información en
cada objeto.


                        Problema

Para divertirte un poco después de largas horas de trabajo, decides crear un
sencillo videojuego en el que los jugadores se tienen que mover  por un mapa
disparándose entre sí. Decides implementar un sistema de partículas realistas
que lo distinga de otros juegos. Grandes cantidades de balas, misiles y
metralla de las explosiones volarán por todo el mapa, ofreciendo una
apasionante experiencia al jugador.

Al terminarlo, subes el último cambio, compilas el juego y se lo envias a un
amigo para una partida de prueba. Aunque el juego funcionaba sin problemas en
tu máquina, tu amigo no logró jugar durante mucho tiempo. En su computadora el
juego se paraba a los pocos minutos de empezar. Tras dedicar varias horas a
revisar los registros de depuración, descubres que el juego se paraba debido a
una cantidad insuficiente de RAM. Resulta que el equipo de tu amigo es mucho
menos potente que tu computadora, y esa es la razón por la que el problema
surgió tan rápido en su máquina.

El problema estaba relacionado con tu sistema de partículas. Cada partícula,
como una bala, un misil o un trozo de metralla, estaba representada por un
objeto separado que contenía gran cantidad de datos. En cierto momento, cuando
la masacre alcanzaba su punto culminante en la pantalla del jugador, las
partículas recién creadas ya no cabían en el resto de RAM, provocando que el
programa fallara.


                        Solución 

Observando más atentamente la clase Partícula, puede ser que te hayas dado
cuenta de que los campos de color y sprite consumen mucha mas memoria que otros
campos. Lo que es peor, esos dos campos almacenan información casi idéntica de
todas las partículas. Por ejemplo todas las balas tienen el mismo color y
sprite.

Otras partes del estado de una partícula, como las coordenadas, vector de
movimiento y velocidad, son únicas en cada partícula. Después de todo, los
valores de estos campos cambian a lo largo del tiempo. Estos datos representan
el contexto siempre cambiante en el que existe la partícula, mientras que el
color y el sprite se mantienen constantes.

Esta información constante de un objeto suele denominarse su estado intrínseco.
Existe dentro del objeto y otros objetos únicamente pueden leerla, no
cambiarla. El resto del estado del objeto, a menudo alterado "desde el
exterior" por otros objetos, se denomina el estado extrínseco.

El patrón flyweight sugiere que dejemos de almacenar el estado extrínseco
dentro del objeto. En lugar de eso, debes pasar este estado a métodos
especificos que dependen de él. Tan solo el estado intrínseco se mantiene
dentro del objeto, permitiendo que lo reutilices en distintos contextos. Como
resultado, necesitarás menos de estos objetos, ya que sólo se diferencian en el
estado intrínseco, que cuenta con muchas menos variaciones que el extrínseco.

Regresemos a nuestro juego dando por hecho que hemos extraído el estado
extrínseco de la clase de nuestra partícula, únicamente tres objetos diferentes
serán suficientes para representar todas las partículas de juego: una bala, un
misil y un trozo de metralla. Como probablemente habrás adivinado, un objeto
que sólo almacena el estado intrínseco se denomina Flyweight(peso mosca).


Almacenamiento del estado extrínseco

¿A dónde se mueve el estado extrínseco? Alguna clase tendrá que almacenarlo. En
la mayoría de los casos, se mueve al objeto contenedor, que reúne objetos antes
de que apliquemos el patrón.

En nuestro caso, se trata del objeto principal Juego, que almacena todas las
partículas en su campo partículas. Para mover el estado extrínseco a esta
clase, debes crear varios campos matriz para almacenar coordenadas, vectores y
velocidades de cada párticula individual. Pero eso no es todo. Necesitas otra
matriz para almacenar referencias a un objeto flyweight específico que
represente una partícula. Estas matrices deben estar sincronizadas para que
puedas acceder a toda la información de una partícula utilizando el mismo
índice.

Una Solución más elegante sería crear una clase de contexto separada que
almacene el estado extrínseco junto con la referencia al objeto flyweight. Esta
solución únicamente exigiría tener una matríz en la clase contenedora.

¡Espera un momento! ¿No deberíamos tener tantos de estos objetos contextuales
como teníamos al principio? Técnicamente, si. Pero el caso es que estos objetos
son mucho más pequeños que antes. Los campos que consumen más memoria se han
movido a unos pocos objetos flyweight. Ahora, cientos de pequeños objetos
contextuales pueden reutilizar un único objeto flyweight pesado, en lugar de
almacenar cientos de copias de sus datos.

    Flyweight y la inmutabilidad
Debido a que el mismo objeto flyweight puede utilizarse en distintos contextos,
debes asegurarte de que su estado no se pueda modificar. Un objeto flyweight
debe inicializar su estado una sola vez a través de parámetros del constructor.
No debe exponer ningún método set(modificador) o campo público a otros objetos.

    Fábrica flyweight
Para un acceso más cómodo a varios objetos flyweight, puedes crear un método
fábrica que gestione un grupo de objetos flyweight existentes. El método acepta
el estado intrínseco del flyweight deseado por un cliente, busca un objeto
flyweight existente que coincida con este estado y lo devuelve si lo encuentra.
Si no, crea un nuevo objeto flyweight y lo añade al grupo.

Existen muchas opciones para colocar este método. El lugar más obvio es un
contenedor flyweight. Alternativamente, podrías crear una nueva clase fábrica y
hacer estático el método fábrica para colocarlo dentro de una clase flyweight
real.


                        Aplicabilidad


>>> Utiliza el patrón Flyweight únicamente cuando tu programa deba soportar una
enorme cantidad de objetos que apenas quepan en la RAM disponible.

<<< La ventaja de aplicar el pátron depende en gran medida de cómo y dónde se
utiliza. Resulta más útil cuando:

    .- La aplicación necesita generar una cantidad enorme de objetos similares.
    .- Esto consume toda la RAM disponible de un dispositivo objetivo.
    .- Los objetos contienen estados duplicados que se pueden extraer y
    compartir entre varios objetos.



                    Cómo implementarlo

1.- Divide los campos de una clase que se convertirá en flyweight en dos
partes:
    .- El estado intrínseco: los campos que contienen información invariable
    duplicada a través de varios objetos.
    .- El estrado extrínseco: los campos que contienen información contextual
    única de cada objeto.

2.- Deja los campos que representan el estado intrínseco en la clase, pero
asegúrate de que sean inmutables. Deben llevar sus valores iniciales únicamente
dentro del constructor.

3.- Repasa los métodos que utilizan campos del estado extrínseco. Para cada
campo utilizado en el método, introduce un nuevo parámetro y utilizalo en lugar
del campo.

4.- Opcionalmente, crea una clase fábrica para gestionar el grupo de objetos
flyweight, buscando uno existente antes de crear uno nuevo. Una vez que la
fábrica esté en su sitio, los clientes sólo deberán solicitar objetos flyweight
a través de ella. Deben describir el flyweight deseado pasando su estado
intrínseco a la fábrica.

5.- El cliente deberá almacenar o calcular valores del estado extrínseco (
contexto) para poder invocar métodos de objetos fñyweight. Por comodidad, el
estado extrínseco puede moverse a una clase contexto separada junto con el
campo referenciador del flyweght.



















