        
                Strategy
    
    Tambien llamado Estrategia


                Proposito

    Strategy es un patron de comportamiento que te permite definir una familia
    de algoritmos, colocar cada uno de ellos en una clase separada y hacer sus
    objetos intercambiables.


                Problema 

    Un dia decidiste crear una aplicacion de navegacion para viajeros
    ocasionales. La aplicacion giraba alrededor de un bonito mapa que ayudaba
    a los usuarios a orientarse rapidamente en cualquier ciudad.

    Una de las funciones mas solicitadas para la aplicacion era la
    planificacion automatica de rutas. Un usuario debia poder introducir una
    direccion y ver la ruta mas rapida a ese destino mostrado en el mapa.

    La primera version de la aplicacion solo genera las rutas sobre carreteras.
    Las personas que viajaban en coche estaban locas de alegria. Pero,
    aparentemente, no a todo el mundo le gusta conducir durante sus vacaciones.
    De modo que, en la siguiente actualizacion, añadiste una opcion para crear
    rutas a pie. Despues, añadiste otra opcion para permitir a las personas
    utilizar el transporte publico en sus rutas.

    Sin embargo, esto era el principio. Mas tarde planeaste añadir la
    generacion de rutas para ciclistas, y mas tarde, otra opcion para trazar
    rutas por todas las atracciones turisticas de una ciudad.

    Aunque desde una perspectiva comercial la aplicacion era un excito, la
    parte tecnica provocaba muchos dolores de cabeza. Cada vez que añadias un
    nuevo algoritmo de enrutamiento, la clase principal del navegador doblaba
    su tamaño. En cierto momento, la bestia se volvio demasiado dificil de
    mantener.

    Cualquier cambio en alguno de los algoritmos, ya fuera un sencillo arreglo
    de un error o un ligero ajuste de la representacion de la calle, afectaba a
    toda la clase, aumentando las probabilidades de crear un error en un codigo
    ya funcional.

    Ademas, el trabajo en equipo se volvio ineficiente. Tus compañeros,
    contratados tras el exitoso lanzamiento, se quejaban de que dedicaban
    demasiado tiempo a resolver conflictos de integracion. Implementar una
    nueva funcion te exige cambiar la misma clase enorme, entrando en
    conflicto con el codigo producido por otras personas.


                    Solucion

    El patron Strategy sugiere que tomas esa clase que hace algo especifico de
    muchas formas diferentes y extraigas todos esos algoritmos para colocarlos
    en clases separadas llamadas estrategias.

    La clase original, llamada contexto, debe tener un campo para almacenar una
    referencia a una de las estrategias. El contexto delega el trabajo a un
    objeto de estrategia vinculado en lugar de ejecutarlo por su cuenta.

    La clase contexto no es responsable de seleccionar un algoritmo adecuado
    para la tarea. En lugar de eso, el cliente pasa la estrategia deseada a la
    clase contexto. De hecho, la clase contexto no sabe mucho acerca de las
    estrategias. Funciona con todas las estrategias a traves de la misma
    interfaz generica, que solo expone un unico metodo para disparar el
    algoritmo encapsulado dentro de la estrategia seleccionada.

    De esta forma, el contexto se vuelve independiente de las estrategias
    concretas, asi que puedes añadir nuevos algoritmos o modificar los
    existentes sin cambiar el codigo de la clase contexto o de otras
    estrategias.

    En nuestra aplicacion de navegacion, cada algoritmo de enrutamiento puede
    extraerse y ponerse en su propia clase con un unico metodo de (crearRuta)
    El metodo acepta un origen y un destino y devuelve una coleccion de puntos
    de control de la ruta.

    Incluso contando con los mismos argumentos, cada clase de enrutamiento
    puede crear una ruta diferente. A la clase navegadora principal no le
    importa que algoritmo se selecciona ya que su labor principal es
    representar un grupo de puntos de control en el mapa. La clase tiene un
    metodo para cambiar la estrategia activa de enrutamiento, de modo que sus
    clientes, como los botones en la interfaz de usuario, pueden sustituir el
    comportamiento seleccionado de enrutamiento por otro.


                Aplicabilidad:

    Utiliza el patron Strategy cuando quieras utilizar distintas variantes de
    un algoritmo dentro de un objeto y poder cambiar de un algoritmo a otro
    durante el tiempo de ejecucion.

    El patron Strategy te permite alterar indirectamente el comportamiento del
    objeto durante el tiempo de ejecucion asociandolo con distintoss subobjetos
    que pueden realizar subtareas especificas de distintas maneras.

    Utiliza el patron Strategy cuando tengas muchas clases similares que solo
    se diferencien en la forma en que ejecutan cierto comportamiento.

    El patron Strategy te permite extraer el comportamiento variante para
    ponerlo en una jerarquia de clases separada y combinar las clases
    originales en una, reduciendo con ello el codigo duplicado.

    Utiliza el patron Strategy para aislar la logica de negocio de una clase,
    de los detalles de implementacion de algoritmos que puedan no ser tan
    importantes en el contexto de esa logica.

    El patron Strategy te permite aislar el codigo, los datos internos y las
    dependencias de varios algoritmos, del resto del codigo. Los diversos
    clientes obtienen una interfaz simple para ejecutar los algoritmos y
    cambiarlos durante el tiempo de ejecucion.

    Utiliza el patron cuando tu clase tenga un enorme operador condicional que
    cambie entre distintas variantes del mismo algoritmo.

    El patron Strategy te permite suprimir dicho condicional extrayendo todos
    los algoritmos para ponerlos en clases separadas, las cuales implementan la
    misma interfaz. El objeto original delega la ejecucion a uno de esos
    objetos, en lugar de implementar todas las variantes del algoritmo.


                Como implementarlo

    1.- En la clase contexto, identifica un algoritmo que tienda a sufrir
    cambios frecuentes. Tambien puede ser un enorme condicional que seleccione
    y ejecute una variante del mismo algoritmo durante el tiempo de ejecucion.

    2.- Declara la interfaz estrategia comun a todas las variantes del
    algoritmo.

    3.- Uno a uno, extrae todos los algoritmos y ponlos en sus propias clases,
    Todas deben implementar la misma interfaz estrategia.

    4.- En la clase contexto, añade un campo para almacenar una referencia a un
    objeto de estrategia. Proporciona un modificador set para sustituir valores
    de ese campo. La clase contexto debe trabajar con el objeto de estrategia
    unicamente a traves de la interfaz estrategia. La clase contexto puede
    definir una interfaz que permita a la estrategia acceder a sus datos.

    5.- Los clientes de la clase contexto deben asociarla con una estrategia
    adecuada que coincida con la forma en la que esperan que la clase contexto
    realice su trabajo principal.












































