                    Singleton

Tambien llamado: Instancia Única


                    Proposito

Singleton es un patrón de diseño que nos permite asegurarnos de que una
clase tenga una única instancia, a la vez que proporciona un punto de
acceso global a dicha instancia.


                    Problema

El patrón Singleton resuelve dos problemas al mismo tiempo, vulnerando el
Principio de responsabilidad única:

    1.- Garantizar que una clase tenga una única instancia. ¿Por qué
    querría alguien controlar cuántas instancias tiene una clase? El motivo
    más habitual es controlar el acceso a algún recurso compartido, por
    ejemplo, una base de datos o un archivo.

    Funciona así: imagina que has creado un objeto y al cabo de un tiempo
    decides crear otro nuevo. En lugar de recibir un objeto nuevo,
    obtendrás el que ya habias creado.

    Ten en cuenta que este comportamiento es imposible de implementar con un
    constructor normal, ya que una llamada al constructor siempre debe devolver
    un nuevo objeto por diseño.

    2.- Proporcionar un punto de acceso global a dicha instancia. ¿Recuerdas
    esas variables globales que utilizaste (bueno, si, fui yo) para almacenar
    objetos esenciales? Aunque son muy útiles, también son poco seguras, ya que
    cualquier código podría sobrescribir el contenido de esas variables y
    descomponer la aplicación.

    Al igual que una variable global el patrón Singleton nos permite acceder a un objeto desde
    cualquier parte del programa, No obstante, también evita que otro código
    sobrescriba esa instancia.

   Este problema tiene otra cara: no queremos que el código que resuelve el
   primer problema se encuentre disperso por todo el programa. Es mucho más
   conveniente tenerlo dentro de una clase, sobre todo si el resto del código
   ya depende de ella.

Hoy en día el patrón Singleton se ha popularizado tanto que la gente suele
llamar singleton a cualquier patrón, incluso si solo resuelve uno de los
problemas antes mencionados.


                    Solución

Todas las implementaciones del patrón Singleton tiene estos dos pasos en común:

    .- Hacer privado el constructor por defecto para evitar que otros objetos
    utilicen el operador (new) con la clase Singleton.

    .- Crear un método de creación estático que actúe como constructor. Tras
    bambalinas, este método invoca al constructor privado para crear un objeto
    y lo guarda en un campo estático. Las siguientes llamadas a este método
    devuelven el objeto almacenado en caché.

Si tu código tiene acceso a la clase Singleton, podrá invocar su método
estático. De esta manera, cada vez que se invoque este método, siempre se
devolverá el mismo objeto.


                    Analogía en el mundo real

El gobierno es un ejemplo excelente del patrón Singleton. Un país sólo puede
tener un gobierno oficial, Independientemente de la identidades personales de
los individuos que forman el gobierno, el título "Gobierno de X" es un punto de
acceso global que identifica al grupo de personas a cargo.


                    Aplicabilidad

>>> Utiliza el patrón Singleton cuando una clase de tu programa tan solo deba
tener una instancia disponible para todos los clientes; por ejemplo, un
único objeto de base de datos compartido por distintas partes del programa

<<< El patrón Singleton deshabilita el resto de las maneras de crear objetos de
una clase, excepto el método especial de creación. Este método crea un objeto,
o bien devuelve uno existente si ya ha sido creado.

>>> Utiliza el patrón Singleton cuando necesites un control más estricto de las
variables globales.

<<< Al contrario que las variables globales, el patrón Singleton garantiza que
haya una única instancia de una clase. A excepción de la propia clase
Singleton, nada puede sustituir la instancia en caché.

Ten en cuenta que siempre podrás ajustar esta limitación y permitir la creación
de cierto número de instancias Singleton. La única parte del código que
requiere cambios es el cuerpo del método getInstance.



                    Cómo implementarlo

1.- Añade un campo estático privado a la clase para almacenar la instancia
Singleton.

2.- Declara un método de creación estático público para obtener la instancia
Singleton.

3.- Implementa una inicialización diferida dentro del método estático. Debe
crear un nuevo objeto en su primera llamada y colocarlo dentro del campo
estático. El método deberá devolver siempre esa instancia en todas las llamadas
siguientes.

4.- Declara el constructor de clase como privado. El método estático de la
clase seguirá siendo capaz de invocar al constructor, pero no a los otros
objetos.

5.- Repasa el código cliente y sustituye todas las llamadas directas al
constructor de la instancia Singleton por llamadas a sus métodos de creación
estático.
























