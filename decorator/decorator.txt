Decorator
    Tambien llamado decorador, envoltorio o wrapper. Responde a la necesidad de
    añadir dinamicamente funcionalidad a un objeto. Esto nos permite no tener
    que crear sucesivas clases que hereden de la primera incorporando la nueva
    funcionalidad, sino otras que la implementan y se asocian a la primera.


        Proposito

    Decorator es un patron de diseño estructural que te permite añadir
    funcionalidades de objetos colocando estos objetos dentro de objetos
    encapsuladores especiales que contienen estas funcionalidades.


        Problema

    Imagina que estas trabajando en una biblioteca de notificaciones que
    permite a otros programadores notificar a sus usuarios acerca de eventos
    importantes.

    La version inicial de la biblioteca se basaba en la clase ( Notificador ) que
    solo contaba con unos cuantos campos, un constructor y un unico metodo ( 
    send ). El metodo podia aceptar un argumento de mensaje de un cliente y
    enviar el mensaje a una lista de correos electronicos que se pasaban a la
    clase notificadora a traves de su constructor. Una aplicacion de un
    tercero que actuaba como cliente debia crear y configurar el objeto
    notificador una vez y despues utilizarlo cada vez que sucediera algo
    importante.

    En cierto momento te das cuenta que los usuarios de la biblioteca esperan
    algo mas que unas simples notificaciones por correo. A muchos de ellos les
    gustaria recibir mensajes SMS sobre asuntos importantes. Otros querrian
    recibir las notificaciones por Facebook y, por supuesto, a los usuarios
    corporativos les encantaria recibir notificaciones por Slack.

    No puede ser muy complicado ¿Verdad? extendiste la clase (Notificador) y
    metiste los metodos adicionales de notificacion dentro de nuevas subclases.
    Ahora el cliente deberia instanciar la clase notificadora deseada y
    utilizarla para el resto de notificaciones.

    Pero entonces alguien te hace una pregunta razonable: ¿ Por que no se
    pueden utilizar varions tipos de notificacion al mismo tiempo ? Si tu casa
    esta en llamas, probablemente quieras que te informen a traves de todos los
    canales.

    Intentaste solucionar ese problema creando subclases especiales que
    combinaban varios metodos de notificacion dentro de una clase. Sin embargo,
    enseguida resulto evidente que esta solucion inflaria el codigo en gran
    medida, no solo el de la biblioteca, sino tambien el codigo cliente.


            Solucion

    Cuando tenemos que alterar la funcionalidad de un objeto, lo primero que se
    viene a la mente es extender una clase. No obstante, la herencia tiene
    varias limitaciones importantes de las que debes ser consciente:

        .- La herencia es estatica. No se puede alterar la funcionalidad de un
        objeto existente durante el tiempo de ejecucion. Solo se puede sustituir
        el objeto completo por otro creado a partir de una subclase diferente.

        .- Las subclases solo pueden tener una clase padre. En la mayoria de
        lenguajes, la herencia no permite a una clase heredar comportamientos
        de varias clases al mismo tiempo.

    Una de las formas de superar estas limitaciones es empleando la Agregacion
    o la Composicion en lugar de la Herencia. Ambas alternativas funcionan
    practicamente del mismo modo: un objeto tiene una referencia a otro y
    delega parte del trabajo, mientras que con la herencia, el propio objeto
    puede realizar ese trabajo, heredando el comportamiento de su superclase.

    Con esta nueva solucion puedes sustituir facilmente el objeto "ayudante"
    vinculado por otro, cambiando el comportamiento del contenedor durante el
    tiempo de ejecucion. Un objeto puede utilizar el comportamiento de varias
    clases con referencia a varios objetos, delegandoles todo tipo de tareas.
    La agregacion/composicion es el principio clave que se esconde tras muchos
    patrones de diseño, incluyendo el Decorator.

    Wrapper (envoltorio en ingles) es el sobrenombre alternativo del patron
    Decorator, que expresa claramente su idea principal. Un wrapper es un
    objeto que puede vincularse con un objeto objetivo. El wrapper contiene el
    mismo grupo de metodos que el objetivo y le delega todas la solicitudes que
    recibe. No obstante el wrapper puiede alterar el resultado haciendo algo
    antes o despues de pasar la solicitud al objetivo.

    ¿Cuando se convierte un simple wrapper en el verdadero decorador? Como he
    mencionado, el wrapper implementa la misma interfaz que el objeto envuelto.
    Este es el motivo por el que, desde la perspectiva del cliente, estos
    objetos son identicos. Haz que el campo de referencia del wrapper acepte
    cualquier objeto que siga esa interfaz. Esto te permitira envolver un
    objeto en varios wrappers, añadiendole el comportamiento combinado de todos
    ellos.

    En nuestro ejemplo de las notificaciones, dejemos la sencilla funcionalidad
    de las notificaciones por correo electronico dentro de la clase base
    (Notificador), pero convitamos el resto de los metodos de notificacion en
    decoradores.

    El codigo cliente debe envolver un objeto basico dentro de un grupo de
    decoradores que satisfagan las preferencias del cliente. Los objetos
    resultantes se estructuraran como una pila.

    El ultimo decorador de la pila sera el objeto con el que el cliente
    trabaja. Debido a que todos los decoradores implementan la misma interfaz
    que la notificadora base, al resto del codigo cliente no le importa si esta
    trabajando con el objeto notificador "puro" o con el decorado.

    Podemos aplicar la misma solucion a otras funcionalidades, como el formateo
    de mensajes o la composicion de una lista de destinatarios. El cliente
    puede decorar el objeto con los decoradores personalizados que desee,
    siempre y cuando sigan la misma interfaz que los demas.











