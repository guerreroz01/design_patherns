                            Facade

        También llamado: Fachada



                            Proposito

Facade es un patrón de diseña estructural que proporciona una interfaz
simplificada a una biblioteca, un framework o cualquier otro grupo complejo de
clases



                            Problema

Imagina que debes lograr que tu código trabaje con un grupo de objetos que
pertenecen a una sofisticada biblioteca o framework. Normalmente, debes
inicializar todos esos objetos, llevar un registro de dependencias, ejecutar
los métodos en el orden correcto y asi sucesivamente.

Como resultado, la lógica de negocio de tus clases se vería estrechamente
acoplada a los detalles de implementación de las clases de terceros, haciéndola
difícil de comprender y mantener.

                            
                            Solución

Una fachada es una clase que proporciona una interfaz simple a un subsistema
complejo que contiene muchas partes móvilles. Una fachada puede proporcionar
una funcionalidad limitada en comparación con trabajar directamente con el
subsistema. Sin embargo, tan solo incluye las funciones realmente importantes
para los clientes.

Tener una fachada resulta útil cuando tienes que integrar tu aplicación con una
biblioteca sofisticada con decenas de funciones, de la cual sólo necesitas una
pequeña parte.

Por ejemplo, una aplicación que sube breves vídeos divertidos de gatos a las
redes sociales, podría potencialmente utilizar una biblioteca de conversión de
vídeo profesional. Sin embargo, lo único que necesita en realidad es una clase
con el método simple codificar(nombreDelArchivo, formato). Una vez que crees
dicha clase y la conectes con la biblioteca de conversión de vídeo, tendrás tu
primera fachada.


                        Analogia en el mundo real

Cuando lamas a una tienda para hacer un pedido por el teléfono, un operador es
tu fachada a todos los servicios y departamentos de la tienda. El operador te
proporciona una sencilla interfaz de voz al sistema de pedidos pasarelas de
pago y varios servicios de entrega.

                        Aplicabilidad

>>> Utiliza el patrón Facade cuando necesites una interfaz limitada pero
directa a un subsistema complejo.

<<< A menudo los subsistemas se vuelven más complejos con el tiempo. Incluso la
aplicación de patrones de diseño suele conducir a la creación de un mayor
número de clases. Un subsistema puede hacerse más flexible y más fácil de
reutilizar en varios contextos, pero la cantidad de código de configuración que
exige de un cliente, crece aún más. El patrón Facade intenta solucionar este
problema proporcionando un atajo a las funciones más utilizadas del subsistema
que mejor encajan con los requisitos del cliente.

>>> Utiliza el patrón Facade cuando quieras estructurar un subsistema en capas.

<<< Crea fachadas para definir puntos de entrada a cada nivel de un subsistema.
Puedes reducir el acoplamiento entre varios subsistemas exigiéndoles que se
comuniquen únicamente mediante fachadas.

Por ejemplo, regresemos a nuestro framework de conversión de vídeo. Puede
dividirse en dos capas: la relacionada con el vídeo y la relacionada con el
audio. Puedes crear una fachada para cada capa y hacer que las clases de cada
una de ellas se comuniquen entre si a través de esas fachadas. Este
procedimiento es bastante similar al patrón Mediator.


                        Cómo implementarlo

1.- Comprueba si es posible proporcionar una interfaz más simple que la que
está proporcionando un subsistema existente. Estás bien encaminado si esta
interfaz hace que el código cliente sea independiente de muchas de las clases
del subsistema.

2.- Declara e implementa esta interfaz en una nueva clase fachada. La fachada
deberá redireccionar las llamadas desde el código cliente a los objetos
adecuados del subsistema. La fachada deberá ser responsable de inicializar el
subsistema y gestionar su ciclo de vida, a no ser que el código cliente ya lo
haga.

3.- Para aprovechar el patrón al máximo, haz que todo el código cliente se
comunique con el subsistema únicamente a través de la fachada. Ahora el código
cliente está protegido de cualquier cambio en el código del subsistema. Por
ejemplo, cuando se actualice un subsistema auna nueva versión, sólo tendrás que
modificar el código de la fachada.

4.- Si la fachada se vuelve demasiado grande, piensa en extraer parte de su
comportamiento y colocarlo dentro de una nueva clase fachada refinada.



























