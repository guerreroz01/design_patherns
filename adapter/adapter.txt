                        Adapter

    También llamado: Adaptador, Envoltorio, Wrapper


                        Proposito

Adapter es un patrón de diseño estructural que permite la colaboración entre
objetos con interfaces incompatibles.


                        Problema

Imagina que estás creando una aplicación de monitoreo del mercado de valores,
La aplicación descarga la información de bolsa desde varias fuentes en formato
XML para presentarla al usuario con bonitos gráficos y diagramas.

En cierto momento, decides mejorar la aplicación integrando una inteligente
biblioteca de análisis de una tercera persona. Pero hay una trampa: la
biblioteca de análisis solo funciona con datos en formato JSON.

Podrías cambiar la biblioteca para que funcione con XML. Sin embargo, esto
podría descomponer parte del código existente que depende de la biblioteca. Y,
lo que es peor, podrías no tener siquiera acceso al código fuente de la
biblioteca, lo que hace imposible esta solución.


                        Solución

Puedes crear un adaptador. Se trata de un objeto especial que convierte la
interfaz de un objeto, de forma que otro objeto pueda comprenderla.

Un adaptador envuelve uno de los objetos para esconder la complejidad de la
conversación que tiene lugar tras bambalinas. El objeto envuelto ni siquiera es
consciente de la existencia del adaptador. Por ejemplo, puedes envolver un
objeto que opera con metros y kilometros con un adaptador que convierte todos
los datos al sistema anglosajón, es decir, pies y millas.

Los adaptadores no solo convierten datos a varios formatos, sino que también
ayudan a objetos con distintas interfaces a colaborar. Funciona así:

    1.- El adaptador obtiene una interfaz compatible con uno de los objetos
    existentes.

    2.- Utilizando esta interfaz, el objeto existente puede invocar con
    seguridad los métodos del adaptador.

    3.- Al recibir una llamada, el adaptador pasa la solicitud al segundo
    objeto, pero en un formato y orden que ese segundo objeto espera.

En ocasiones se puede incluso crear un adaptador de dos direcciones que pueda
convertir las llamadas en ambos sentidos.


                        Aplicabilidad

>>> Utiliza la clase adaptadora cuando quieras usar una clase existente, pero
cuya interfaz no sea compatible con el resto del código.

<<< El patrón Adapter te permite crear una clase intermedia que sirva como
traductora entre tu código y una clase heredada, una clase de un tercero o
cualquier otra clase con un interfaz extraña.

>>> Utiliza el patrón cuando quieras reutilizar varias subclases existentes que
carezcan de alguna funcionalidad común que no pueda añadirse a la superclase.

<<< Puedes extender cada subclase y colocar la funcionalidad que falta, dentro
de las nuevas clases hijas. No obstante, deberás duplicar el código en todas
estas nuevas clases, lo cual huele muy mal.

Una solución mucho más elegante sería colocar la funcionalidad que falta dentro
de una clase adaptadora. Después puedes envolver objetos a los que les falten
funciones, dentro de la clase adaptadora, obteniendo esas funciones necesarias
de un modo dinámico. Para que esto funcione, las clases en cuestión deben tener
una interfaz común y el campo de la clase adaptadora debe seguir dicha
interfaz. Este procedimiento es muy similar al del patrón Decorator.


                        Cómo implementarlo

1.- Asegúrate de que tienes al menos dos clases con interfaces incompatibles:
    .- Una útil clase servicio que no puedes cambiar (a menudo de un tercero,
    hereda o con muchas existentes).

    .- Una o varias clases cliente que se beneficiarían de contar con una clase
    de servicio.

2.- Declara la interfaz con el cliente y describe el modo en que las clases
cliente se comunican con la clase de servicio.

3.- Crea la clase adaptadora y haz que siga la interfaz con el cliente. Deja
todos los métodos vacíos por ahora.

4.- Añade un campo a la clase adaptadora para almacenar una referencia al
objeto de servicio. La práctica común es inicializar este campo a través del
constructor, pero en ocasiones es adecuado pasarlo al adaptador cuando se
invocan sus métodos.

5.- Uno por uno, implementa todos los métodos de la interfaz con el cliente en
la clase adaptadora. La clase adaptadora deberá delegar la mayor parte del
trabajo real al objeto de servicio, gestionando tan solo la interfaz o la
conversación de formato de los datos.

6.- Las clases cliente deberán utilizar la clase adaptadora a través de la
interfaz con el cliente. Esto te permitirá cambiar o extender las clases
adaptadoras sin afectar al código cliente.










































